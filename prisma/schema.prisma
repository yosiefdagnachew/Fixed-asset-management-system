generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  password            String
  role                Role          @default(USER)
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  disposalRequests    Disposal[]    @relation("DisposalRequestedBy")
  maintenanceRequests Maintenance[] @relation("MaintenanceRequestedBy")
  transferRequests    Transfer[]    @relation("TransferRequestedBy")
}

model Asset {
  id                  String         @id @default(cuid())
  name                String
  description         String?
  serialNumber        String         @unique
  purchaseDate        DateTime
  purchasePrice       Float
  currentValue        Float
  status              String         @default("ACTIVE")
  location            String?
  department          String?
  category            String?  
  type                String?
  supplier            String?
  warrantyExpiry      DateTime?
  lastMaintenance     DateTime?
  nextMaintenance     DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  history             AssetHistory[]
  depreciations       Depreciation[]
  disposalRequests    Disposal[]
  documents           Document[]
  maintenanceRequests Maintenance[]
  transferRequests    Transfer[]
  linkedTo            LinkedAsset[]  @relation("LinkedToAsset")
  linkedFrom          LinkedAsset[]  @relation("LinkedFromAsset")
}

model Transfer {
  id             String         @id @default(cuid())
  assetId        String
  reason         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  fromDepartment String
  requesterId    String
  toDepartment   String
  status         TransferStatus @default(PENDING)
  asset          Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  requester      User           @relation("TransferRequestedBy", fields: [requesterId], references: [id])
}

model Maintenance {
  id          String              @id @default(cuid())
  assetId     String
  description String
  cost        Float?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  completedAt DateTime?
  priority    MaintenancePriority
  requesterId String
  status      MaintenanceStatus   @default(PENDING)
  asset       Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  requester   User                @relation("MaintenanceRequestedBy", fields: [requesterId], references: [id])
}

model Disposal {
  id            String         @id @default(cuid())
  assetId       String
  reason        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  actualValue   Float?
  expectedValue Float
  requesterId   String
  method        DisposalMethod
  status        DisposalStatus @default(PENDING)
  asset         Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  requester     User           @relation("DisposalRequestedBy", fields: [requesterId], references: [id])
}

model Document {
  id        String       @id @default(cuid())
  assetId   String
  type      DocumentType
  url       String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  asset     Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Depreciation {
  id               String   @id @default(cuid())
  assetId          String
  amount           Float
  date             DateTime
  createdAt        DateTime @default(now())
  depreciationRate Float
  description      String?
  method           String
  salvageValue     Float
  updatedAt        DateTime @updatedAt
  usefulLife       Int
  asset            Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model AssetHistory {
  id        String   @id @default(cuid())
  assetId   String
  field     String
  oldValue  String?
  newValue  String?
  changedAt DateTime @default(now())
  changedBy String?
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

enum AssetStatus {
  ACTIVE
  TRANSFERRED
  DISPOSED
  UNDER_MAINTENANCE
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  INSPECTION
}

enum MaintenanceStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DisposalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum DisposalMethod {
  SALE
  DONATION
  RECYCLE
  SCRAP
}

enum DocumentType {
  INVOICE
  WARRANTY
  MANUAL
  MAINTENANCE_RECORD
  OTHER
}

enum DepreciationMethod {
  STRAIGHT_LINE
  DECLINING_BALANCE
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model LinkedAsset {
  id            String   @id @default(cuid())
  fromAssetId   String
  toAssetId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  fromAsset     Asset    @relation("LinkedFromAsset", fields: [fromAssetId], references: [id], onDelete: Cascade)
  toAsset       Asset    @relation("LinkedToAsset", fields: [toAssetId], references: [id], onDelete: Cascade)

  @@unique([fromAssetId, toAssetId])
  @@index([fromAssetId])
  @@index([toAssetId])
}
