generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RoleChangeLog {
  id         String   @id @default(uuid())
  userId     String
  oldRole    String
  newRole    String
  changedBy  String
  changedAt  DateTime @default(now())

  user       User     @relation("RoleChangedUser", fields: [userId], references: [id], onDelete: Cascade)
  changedByUser User  @relation("RoleChangedBy", fields: [changedBy], references: [id], onDelete: Cascade)
}

model User {
  // ... existing fields ...
  roleChangeLogs      RoleChangeLog[] @relation("RoleChangedUser")
  roleChangesMade     RoleChangeLog[] @relation("RoleChangedBy")
  // ...existing fields...
  userPermissions   UserPermission[]
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  password            String
  role                Role          @default(USER)
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  maintenanceRequests Maintenance[] @relation("MaintenanceRequestedBy")
  managedMaintenance  Maintenance[] @relation("MaintenanceManagedBy")
  transferRequests    Transfer[]    @relation("TransferRequestedBy")
  disposalRequests    Disposal[]    @relation("DisposalRequestedBy")
  notifications      Notification[]

  // Audit relations
  auditsPerformed     AssetAudit[]       @relation("AuditPerformedBy")
  auditAssignments    AuditAssignment[]  @relation("AuditAssignedTo")
  auditAssignmentsMade AuditAssignment[] @relation("AuditAssignedBy")
  auditRequests       AuditRequest[]     @relation("AuditRequestedBy")
  auditRequestsReviewed AuditRequest[]   @relation("AuditRequestReviewedBy")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  type      String   @default("info")
  meta      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Asset {
  id                  String         @id @default(cuid())
  name                String
  description         String?
  serialNumber        String         @unique
  purchaseDate        DateTime
  purchasePrice       Float
  currentValue        Float
  status              String         @default("ACTIVE")
  location            String?
  department          String?
  category            String?
  type                String?
  supplier            String?
  warrantyExpiry      DateTime?
  lastMaintenance     DateTime?
  nextMaintenance     DateTime?
  depreciableCost     Float?
  salvageValue        Float?
  usefulLifeMonths    Int?
  depreciationMethod  DepreciationMethod?
  depreciationStartDate DateTime?
  lastAuditDate       DateTime?
  nextAuditDate       DateTime?
  assetDepreciations  AssetDepreciation[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  history             AssetHistory[]
  depreciations       Depreciation[]
  disposalRequests    Disposal[]
  documents           Document[]
  maintenanceRequests Maintenance[]
  transferRequests    Transfer[]
  linkedTo            LinkedAsset[]  @relation("LinkedToAsset")
  linkedFrom          LinkedAsset[]  @relation("LinkedFromAsset")
  capitalImprovements CapitalImprovement[]
  audits              AssetAudit[]
  auditAssignments    AuditAssignment[]
  auditRequests       AuditRequest[]
}

model Transfer {
  id             String         @id @default(cuid())
  assetId        String
  reason         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  fromDepartment String
  requesterId    String
  toDepartment   String
  status         TransferStatus @default(PENDING)
  managerReason  String?        // Reason provided by manager for rejection
  asset          Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  requester      User           @relation("TransferRequestedBy", fields: [requesterId], references: [id])
}

model Maintenance {
  id           String              @id @default(cuid())
  assetId      String
  description  String
  cost         Float?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  completedAt  DateTime?
  scheduledDate DateTime?
  priority     MaintenancePriority
  requesterId  String
  managerId    String?
  status       MaintenanceStatus   @default(PENDING_APPROVAL)
  notes        String?
  asset        Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  requester    User                @relation("MaintenanceRequestedBy", fields: [requesterId], references: [id])
  manager      User?               @relation("MaintenanceManagedBy", fields: [managerId], references: [id])

  @@index([managerId])
}

model Disposal {
  id            String         @id @default(cuid())
  assetId       String
  reason        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  actualValue   Float?
  expectedValue Float
  requesterId   String
  method        DisposalMethod
  status        DisposalStatus @default(PENDING)
  asset         Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  requester     User           @relation("DisposalRequestedBy", fields: [requesterId], references: [id])
}

model Document {
  id        String       @id @default(cuid())
  assetId   String
  type      DocumentType
  url       String
  fileName  String?      // Original file name
  fileSize  Int?         // File size in bytes
  filePath  String?      // Local file path (if stored locally)
  mimeType  String?      // MIME type of the file
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  asset     Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  meta      Json?        // Metadata for the document (e.g., transferId, status)
}

model Depreciation {
  id               String   @id @default(cuid())
  assetId          String
  amount           Float
  date             DateTime
  createdAt        DateTime @default(now())
  depreciationRate Float
  description      String?
  method           String
  salvageValue     Float
  updatedAt        DateTime @updatedAt
  usefulLife       Int
  asset            Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model AssetDepreciation {
  id               String   @id @default(cuid())
  asset            Asset    @relation(fields: [assetId], references: [id])
  assetId          String
  amount           Float
  date             DateTime
  method           String
  usefulLife       Int
  salvageValue     Float
  depreciationRate Float?
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("asset_depreciations")
}

model AssetHistory {
  id        String   @id @default(cuid())
  assetId   String
  field     String
  oldValue  String?
  newValue  String?
  changedAt DateTime @default(now())
  changedBy String?
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}


enum AssetStatus {
  ACTIVE
  TRANSFERRED
  DISPOSED
  UNDER_MAINTENANCE
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  INSPECTION
}

enum MaintenanceStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DisposalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum DisposalMethod {
  SALE
  DONATION
  RECYCLE
  SCRAP
}

enum DepreciationMethod {
  STRAIGHT_LINE
  DECLINING_BALANCE
  DOUBLE_DECLINING
  SUM_OF_YEARS_DIGITS
  UNITS_OF_ACTIVITY
}

enum DocumentType {
  INVOICE
  WARRANTY
  MANUAL
  MAINTENANCE_RECORD
  TRANSFER_APPROVAL
  TRANSFER_REJECTION
  MAINTENANCE_APPROVAL
  MAINTENANCE_REJECTION
  OTHER
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model LinkedAsset {
  id            String   @id @default(cuid())
  fromAssetId   String
  toAssetId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  fromAsset     Asset    @relation("LinkedFromAsset", fields: [fromAssetId], references: [id], onDelete: Cascade)
  toAsset       Asset    @relation("LinkedToAsset", fields: [toAssetId], references: [id], onDelete: Cascade)

  @@unique([fromAssetId, toAssetId])
  @@index([fromAssetId])
  @@index([toAssetId])
}
model Permission {
  // ...existing fields...
  userPermissions   UserPermission[]
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
}

model UserPermission {
  id           String      @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean     // true = explicitly granted, false = explicitly denied
  createdAt    DateTime    @default(now()) // Added createdAt field
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade) // Added onDelete: Cascade
  permission   Permission  @relation(fields: [permissionId], references: [id])
  @@unique([userId, permissionId])
}

model RolePermission {
  id           String     @id @default(cuid())
  role         Role
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  @@unique([role, permissionId])
}

model CapitalImprovement {
  id                String   @id @default(cuid())
  assetId           String
  description       String
  improvementDate   DateTime
  cost              Float
  usefulLifeMonths  Int?
  depreciationMethod DepreciationMethod?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  asset             Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

enum AuditStatus {
  PENDING
  COMPLETED
  FAILED
  NEEDS_REVIEW
}

enum AuditCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
  MISSING
}

enum AuditAssignmentStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum AuditRequestStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum AuditWorkflowStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  REQUIRES_REVISION
}

model AssetAudit {
  id                String              @id @default(cuid())
  assetId           String
  auditDate         DateTime
  auditedBy         String
  auditorId         String?             // Reference to User who performed audit
  status            AuditStatus         @default(PENDING)
  workflowStatus    AuditWorkflowStatus @default(DRAFT)
  condition         AuditCondition?
  locationVerified  Boolean             @default(true)
  actualLocation    String?             // Actual location if different from expected
  notes             String?
  discrepancies     String?
  recommendations   String?             // Audit recommendations
  checklistItems    String?             // JSON array of checklist items with results
  discrepancyResolved Boolean           @default(false)
  resolvedDate      DateTime?
  resolvedBy        String?
  resolutionNotes   String?
  photoUrls         String?             // Comma-separated URLs
  nextAuditDate     DateTime?

  // Workflow fields
  assignmentId      String?             // Reference to AuditAssignment
  requestId         String?             // Reference to AuditRequest
  reviewedBy        String?             // Manager who reviewed
  reviewedAt        DateTime?
  reviewNotes       String?
  managerApproval   Boolean?            // Manager approval status

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  asset             Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  auditor           User?               @relation("AuditPerformedBy", fields: [auditorId], references: [id])
  assignment        AuditAssignment?    @relation(fields: [assignmentId], references: [id])
  request           AuditRequest?       @relation(fields: [requestId], references: [id])

  @@index([assetId])
  @@index([auditDate])
  @@index([status])
  @@index([workflowStatus])
  @@index([auditorId])
}

model AuditAssignment {
  id              String                @id @default(cuid())
  assetId         String
  assignedToId    String                // User ID of assigned auditor
  assignedById    String                // Manager ID who assigned
  title           String
  description     String?
  priority        MaintenancePriority   @default(MEDIUM)
  dueDate         DateTime
  scheduledDate   DateTime?
  status          AuditAssignmentStatus @default(PENDING)
  instructions    String?
  checklistItems  String?               // JSON array of checklist items
  estimatedHours  Float?
  actualHours     Float?

  // Assignment workflow
  acceptedAt      DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  cancelledAt     DateTime?
  cancellationReason String?

  // Notifications
  notificationSent Boolean              @default(false)
  remindersSent   Int                   @default(0)

  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  asset           Asset                 @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assignedTo      User                  @relation("AuditAssignedTo", fields: [assignedToId], references: [id])
  assignedBy      User                  @relation("AuditAssignedBy", fields: [assignedById], references: [id])
  audits          AssetAudit[]

  @@index([assetId])
  @@index([assignedToId])
  @@index([assignedById])
  @@index([status])
  @@index([dueDate])
}

model AuditRequest {
  id              String              @id @default(cuid())
  assetId         String
  requesterId     String              // User who requested the audit
  managerId       String?             // Manager who will review
  title           String
  reason          String              // Why audit is needed
  urgency         MaintenancePriority @default(MEDIUM)
  requestedDate   DateTime            // When audit should happen
  status          AuditRequestStatus  @default(PENDING_APPROVAL)

  // Manager review
  reviewedAt      DateTime?
  reviewNotes     String?
  approvedBy      String?             // Manager who approved/rejected
  rejectionReason String?

  // Request details
  description     String?
  expectedFindings String?            // What the requester expects to find
  attachments     String?             // URLs to supporting documents

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  asset           Asset               @relation(fields: [assetId], references: [id], onDelete: Cascade)
  requester       User                @relation("AuditRequestedBy", fields: [requesterId], references: [id])
  manager         User?               @relation("AuditRequestReviewedBy", fields: [managerId], references: [id])
  audits          AssetAudit[]

  @@index([assetId])
  @@index([requesterId])
  @@index([managerId])
  @@index([status])
  @@index([requestedDate])
}
